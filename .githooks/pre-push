#!/usr/bin/env bash

set -euo pipefail

echo "[pre-push] Initializing hook..."

# Optional bypass via environment variable
case "${SKIP_HOOK_CHECKS:-}" in
    1|true|TRUE|yes|YES)
        echo "[pre-push] SKIP_HOOK_CHECKS enabled. Bypassing hook."
        exit 0
        ;;
esac

# Move to repository root
REPO_ROOT="$(git rev-parse --show-toplevel)"
cd "$REPO_ROOT"

echo "[pre-push] Cleaning temporary files and directories..."

# Utility functions
remove_dirs() {
	local name="$1"
	# Remove all directories matching pattern throughout repo, avoiding entering node_modules that are deleted later
	# Ignore errors (locked files on Windows)
	find . -path "*/.git" -prune -o -type d -name "$name" -print0 | xargs -0 -I {} sh -c 'rm -rf "$1" || true' _ {}
}

remove_globs() {
	local pattern="$1"
	# Remove files matching pattern
	find . -path "*/.git" -prune -o -type f -name "$pattern" -print0 | xargs -0 -I {} rm -f {}
}

# Python directories / caches
remove_dirs "__pycache__"
remove_dirs ".pytest_cache"
remove_dirs ".mypy_cache"
remove_dirs ".ruff_cache"

# Node directories / outputs
remove_dirs "node_modules"
remove_dirs "dist"
remove_dirs "build"
remove_dirs ".cache"
remove_dirs "coverage"
remove_dirs "htmlcov"

# Virtual environments: DO NOT remove .venv to avoid Windows locks

# Common temporary files
remove_globs "*.log"
remove_globs "*.tmp"
remove_globs "*.pyc"
remove_globs "*.pyo"

echo "[pre-push] Dependencies: reinstallation..."

# Python detection
PYTHON_BIN=""
if command -v python3 >/dev/null 2>&1; then
	PYTHON_BIN="python3"
elif command -v python >/dev/null 2>&1; then
	PYTHON_BIN="python"
fi

USE_PYTHON=false
if [[ -n "${PYTHON_BIN}" ]]; then
	USE_PYTHON=true
fi

if $USE_PYTHON; then
	# Create clean venv and install dependencies if requirements exists
	echo "[pre-push] Python: preparing virtual environment and installing dependencies..."
	if [[ ! -d ".venv" ]]; then
		"${PYTHON_BIN}" -m venv .venv
	fi
	# shellcheck source=/dev/null
	if [[ -f ".venv/bin/activate" ]]; then
		source .venv/bin/activate
	elif [[ -f ".venv/Scripts/activate" ]]; then
		source .venv/Scripts/activate
	else
		echo "[pre-push] Warning: venv activation script not found."
	fi
	python -m pip install --upgrade pip >/dev/null
	if [[ -f "bot/requirements.txt" ]]; then
		pip install -r bot/requirements.txt
	else
		echo "[pre-push] Warning: bot/requirements.txt not found, Python installation step skipped."
	fi
else
	echo "[pre-push] Warning: Python not found, Python steps skipped."
fi

# Node project detection and reinstallation
if command -v npm >/dev/null 2>&1; then
	echo "[pre-push] npm: reinstalling dependencies (npm ci) for each detected package.json..."
	# Find all package.json files (excluding node_modules)
	mapfile -t PKG_JSONS < <(find . -path "*/node_modules" -prune -o -name package.json -print)
	for pkg in "${PKG_JSONS[@]}"; do
		dir="$(dirname "$pkg")"
		echo "[pre-push] npm ci in: $dir"
		(
			cd "$dir"
			npm ci --no-audit --no-fund
		)
	done
else
	echo "[pre-push] Warning: npm not found, npm steps skipped."
fi

echo "[pre-push] Linting..."

# Lint Python
if $USE_PYTHON; then
	if command -v flake8 >/dev/null 2>&1; then
		echo "[pre-push] flake8"
		flake8 .
	fi
	if command -v black >/dev/null 2>&1; then
		echo "[pre-push] black --check"
		black --check .
	fi
	if command -v isort >/dev/null 2>&1; then
		echo "[pre-push] isort --check-only"
		isort --check-only .
	fi
	if command -v mypy >/dev/null 2>&1; then
		echo "[pre-push] mypy"
		mypy . || true
	fi
fi

# Lint npm if script present
if command -v npm >/dev/null 2>&1; then
	for pkg in "${PKG_JSONS[@]:-}"; do
		dir="$(dirname "$pkg")"
		echo "[pre-push] checking and running lint script (if present) in: $dir"
		(
			cd "$dir"
			npm run -s lint --if-present || true
		)
	done
fi

echo "[pre-push] Build..."

# Build Python: bytecode compilation
if $USE_PYTHON; then
	echo "[pre-push] Python: compilation (compileall)"
	python -m compileall -q .
fi

# Build npm if script present
if command -v npm >/dev/null 2>&1; then
	for pkg in "${PKG_JSONS[@]:-}"; do
		dir="$(dirname "$pkg")"
		echo "[pre-push] running build script (if present) in: $dir"
		(
			cd "$dir"
			npm run -s build --if-present || true
		)
	done
fi

# Export Godot Web if godot project present
if [[ -d "godot" && -f "scripts/export_godot.sh" ]]; then
	echo "[pre-push] Godot: web export to docs/miniapp/game/"
	if bash scripts/export_godot.sh "Web" "godot" "../docs/miniapp/game/index.html" 2>/dev/null; then
		echo "[pre-push] Godot web export completed successfully"
	else
		echo "[pre-push] Warning: Godot web export failed (ignored)"
	fi
fi

echo "[pre-push] Tests..."

# Python tests
if $USE_PYTHON; then
	if command -v pytest >/dev/null 2>&1; then
		echo "[pre-push] pytest"
		pytest -q
	fi
fi

# npm tests if script present
if command -v npm >/dev/null 2>&1; then
	for pkg in "${PKG_JSONS[@]:-}"; do
		dir="$(dirname "$pkg")"
		echo "[pre-push] running test script (if present) in: $dir"
		(
			cd "$dir"
			npm test --silent --if-present || true
		)
	done
fi

echo "[pre-push] All checks completed successfully. Authorizing push."
