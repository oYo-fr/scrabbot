---
description: Reminder to update the dev container Dockerfile when installing pip packages
---

# Python Package Installation

## Important Rule: Synchronize pip install with Dockerfile

**Every time a `pip install` is performed during development, it MUST also be added to the dev container Dockerfile.**

### Process to follow:

1. **When doing a `pip install` in development:**
   ```bash
   pip install pandas
   ```

2. **Immediately after, update the [.devcontainer/Dockerfile](mdc:.devcontainer/Dockerfile) file:**
   - Add the package to the dependency list
   - Or update [requirements.txt](mdc:requirements.txt) if it exists

### Examples:

**Option 1 - Direct addition in Dockerfile:**
```dockerfile
RUN pip install pandas numpy requests
```

**Option 2 - Via requirements.txt:**
```dockerfile
COPY requirements.txt .
RUN pip install -r requirements.txt
```

### Why this is important:

- ✅ **Reproducible environment** for all developers
- ✅ **Avoids errors** "module not found" when rebuilding the container
- ✅ **Consistent deployment** between development and production
- ✅ **Automatic documentation** of dependencies

### Affected files:
- [.devcontainer/Dockerfile](mdc:.devcontainer/Dockerfile)
- [.devcontainer/devcontainer.json](mdc:.devcontainer/devcontainer.json)
- [requirements.txt](mdc:requirements.txt) (if used)
- [bot/requirements.txt](mdc:bot/requirements.txt) (bot-specific)

⚠️ **Never forget this step!** A pip install without Dockerfile update = problem for other developers.

## Terminal command management

**Important:** When the user clicks "skip" during command execution, it's often because:

- ✅ **The command has already finished** and returned control
- ✅ **The result is already displayed** in the terminal
- ⚠️ **I didn't notice** that the command was finished

**Reflex to have:**
1. **Check the prompt**: If you see `$` or the prompt, the command is finished
2. **Read the last output**: The response is often already there
3. **Continue without rerunning**: No need to re-execute