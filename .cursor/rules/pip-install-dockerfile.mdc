---
description: Rappel pour mettre à jour le Dockerfile du dev container lors des installations pip
---

# Installation de Packages Python

## Règle importante : Synchronisation pip install avec Dockerfile

**À chaque fois qu'un `pip install` est effectué pendant le développement, il FAUT également l'ajouter dans le Dockerfile du dev container.**

### Processus à suivre :

1. **Lors d'un `pip install` en développement :**
   ```bash
   pip install pandas
   ```

2. **Immédiatement après, mettre à jour le fichier [.devcontainer/Dockerfile](mdc:.devcontainer/Dockerfile) :**
   - Ajouter le package à la liste des dépendances
   - Ou mettre à jour [requirements.txt](mdc:requirements.txt) si existant

### Exemples :

**Option 1 - Ajout direct dans Dockerfile :**
```dockerfile
RUN pip install pandas numpy requests
```

**Option 2 - Via requirements.txt :**
```dockerfile
COPY requirements.txt .
RUN pip install -r requirements.txt
```

### Pourquoi c'est important :

- ✅ **Environnement reproductible** pour tous les développeurs
- ✅ **Évite les erreurs** "module not found" lors de la reconstruction du container
- ✅ **Déploiement cohérent** entre développement et production
- ✅ **Documentation** automatique des dépendances

### Fichiers concernés :
- [.devcontainer/Dockerfile](mdc:.devcontainer/Dockerfile)
- [.devcontainer/devcontainer.json](mdc:.devcontainer/devcontainer.json)
- [requirements.txt](mdc:requirements.txt) (si utilisé)
- [bot/requirements.txt](mdc:bot/requirements.txt) (spécifique au bot)

⚠️ **Ne jamais oublier cette étape !** Un pip install sans mise à jour du Dockerfile = problème pour les autres développeurs.

## Gestion des commandes terminal

**Important :** Quand l'utilisateur clique sur "skip" pendant l'exécution d'une commande, c'est souvent parce que :

- ✅ **La commande s'est déjà terminée** et a rendu la main
- ✅ **Le résultat est déjà affiché** dans le terminal
- ⚠️ **Je n'ai pas remarqué** que la commande était finie

**Réflexe à avoir :**
1. **Vérifier le prompt** : Si on voit `$` ou le prompt, la commande est finie
2. **Lire le dernier output** : La réponse est souvent déjà là
3. **Continuer sans relancer** : Pas besoin de re-exécuter